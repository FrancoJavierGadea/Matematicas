---
import ExcalidrawEmbed from '@components/ExcalidrawEmbed.astro';

const {defaultTab = 'markdown'} = Astro.props;

const Tabsname = Object.keys(Astro.slots)
.filter(v => {

    return !['default', 'controls', 'markdown'].includes(v)
});

---

<div class="Doc-controls">
    <ul class="nav nav-tabs">
        {
            ['markdown', ...Tabsname].map((name, i) => {
    
                const isActive = defaultTab === name;
    
                return <li class="nav-item">
                    <button class="tab-btn nav-link" data-tab-name={name} 
                    
                        class:list={{'active': isActive}}
                    >
                        {name}
                    </button>
                </li>
            }) 
        }
    </ul>


    <div class="controls">

        <button class="btn" title="Mostrar / Ocultar Excalidraw"
            
            onclick="document.getElementById('excalidraw-embed').classList.toggle('show')" 
        >
            <i class="bi bi-pencil-square"></i>
        </button>

        <slot name="controls" />
    </div>
</div>

<div class="Doc-content">

    {
        ['markdown', ...Tabsname].map((name) => {

            const isActive = defaultTab === name;

            return <div class="Doc-content-tab" set:html={Astro.slots.render(name)} data-tab-name={name}
            
                class:list={{
                    'active': isActive,
                    'Render-markdown': name === 'markdown'
                }}
            />
        })
    }

    <div class="excalidraw-embed" id="excalidraw-embed">

        <ExcalidrawEmbed />

    </div>

</div>

<script>

    document.querySelectorAll('.Doc-controls button.tab-btn').forEach(btn => {


        btn.addEventListener('click', (e) => {

            const name = e.currentTarget.getAttribute('data-tab-name');

            //Update buttons
            document.querySelector('.Doc-controls .nav-tabs .nav-link.active')
                .classList.toggle('active', false);

            document.querySelector(`.Doc-controls .nav-tabs .nav-link[data-tab-name="${name}"]`)
                .classList.toggle('active', true);

            //Update content    
            document.querySelector('.Doc-content .Doc-content-tab.active')
                .classList.toggle('active', false);

            document.querySelector(`.Doc-content .Doc-content-tab[data-tab-name="${name}"]`)
                .classList.toggle('active', true);
        })
    })

</script>

<script>
    import PhotoSwipeLightbox from 'photoswipe/lightbox';

    const images = document.querySelectorAll('.Render-markdown img')
    
    //console.log('images')
    
    images.forEach(img => {

        const anchor = document.createElement('a');

        anchor.setAttribute('data-pswp-src', img.src);
        anchor.setAttribute('data-pswp-width', img.naturalWidth);
        anchor.setAttribute('data-pswp-height', img.naturalHeight);
        anchor.classList.add('image-link-wrapper')

        img.parentElement.appendChild(anchor);
        anchor.appendChild(img);
    });

    if(images.length > 0) {
        
        const lightbox = new PhotoSwipeLightbox({
            gallery: '.Render-markdown',
            children: '.image-link-wrapper',
            pswpModule: () => import('photoswipe'),
        });
    
        lightbox.init();
    }
</script>

<style>

    :global([data-theme="dark"]) {
        --doc-control-color: #848d97;
        --doc-control-color-hover: #2a70f3;
        --doc-controls-border-color: #7c7c7c;
        --doc-controls-border-size: 1px;
    }
    :global([data-theme="light"]) {
        --doc-control-color: #3d3d3d;
        --doc-control-color-hover: #0b0280;
        --doc-controls-border-color: #000000;
        --doc-controls-border-size: 1px;
    }

    .Doc-controls {
        width: 100%;
        display: flex;
        padding-bottom: 20px;

        .nav-tabs {

            flex-grow: 1;
            --bs-nav-tabs-border-width: var(--doc-controls-border-size);
            --bs-nav-tabs-border-color: var(--doc-controls-border-color);
            --bs-nav-tabs-link-active-border-color: var(--doc-controls-border-color) var(--doc-controls-border-color) var(--bs-body-bg);

            .tab-btn::first-letter {

                text-transform: capitalize; 
            }
        }

        .controls {
            display: flex;
            justify-content: end;
            align-items: center;
            padding-inline: 20px;
            gap: 20px;
    
            border-bottom: var(--doc-controls-border-size) solid var(--doc-controls-border-color);

            .btn {
                text-decoration: none;
                font-size: 24px;
                padding: 0;
                border: none;
                color: var(--doc-control-color);

                &:hover {
                    color: var(--doc-control-color-hover);
                }
            }
        }

    }

    .Doc-content {
        width: 100%;
        max-width: 100%;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;

        & > * {
            width: 100%;
            max-width: 100%;
            min-width: 0px;/*<--- Esto arregla el overflow */
            grid-row-start: 1;
            grid-column-start: 1;
            overflow: hidden;
        }

        .Doc-content-tab {
            display: none;

            &.active {
                display: block;
            }
        }

        .Render-markdown {
            .image-link-wrapper {
                cursor: pointer;
            }
            max-width: 100vw;
            
        }

        .excalidraw-embed {
            position: sticky;
            top: var(--nav-height);
            height: calc(100vh - var(--nav-height));
            visibility: hidden;
        }
        .excalidraw-embed.show {
            visibility: visible;
        }
    }

</style>
