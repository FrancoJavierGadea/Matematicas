---
import {github} from "@utils/baseURLUtil.js";
import DocRenderContainer from "@layouts/DocRenderContainer.astro";
import GeogebraEmbed from "@components/GeogebraEmbed.astro";
const { doc } = Astro.props;

const { Content } = await doc.entry.render();

const styles = Object.entries(doc.entry.data.styles || {})
    .map(([key, value]) => {

        return `--${key}: ${value};`
    })
    .join(' ');

const geogebra = doc.entry.data.geogebra;
---

<custom-doc class="Doc">

    <DocRenderContainer >

        <Fragment slot="controls">

            <div class="dropdown-center">
                <button class="btn Doc-source-btn" title="Descargar" type="button" data-bs-toggle="dropdown">
                    <i class="bi bi-download"></i>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item" id="download-html" title="Descargar HTML">Descargar HTML</button>
                    </li>
                    <li>
                        <button class="dropdown-item" id="download-pdf" title="Descargar PDF">Descargar PDF</button>
                    </li>
                    <li>
                        <a class="dropdown-item" href={github.rawBaseURL(`${doc.path}`)} download={`${doc.name}`} title="Descargar Markdown" id="download-md">Descargar Markdown</a>
                    </li>
                </ul>
            </div>
            
            <button class="btn Doc-source-btn" title="Ver HTML" id="show-html">
                <i class="bi bi-filetype-html"></i>
            </button>
    
            <a class="btn" href={github.fileBaseURL(`${doc.path}`)} 
                target="_blank" rel="noopener noreferrer" title="Ver en github"
            >
                <i class="bi bi-github"></i>
            </a>
    
            <a class="btn" href={github.rawBaseURL(`${doc.path}`)} 
                target="_blank" rel="noopener noreferrer" title="Ver raw markdown"
            >
                <i class="bi bi-filetype-md"></i>
            </a>
        </Fragment>

        <div class="markdown-body horizontal-scroll-bar" style={`${styles}`} slot="markdown">
    
            <Content />
    
        </div>

        {

            geogebra?.map(({id, title}) => {

                return <div class="geogebra-item horizontal-scroll-bar" slot="geogebra">
                    {title && <h3 class="geogebra-item-title">{title}</h3>}
                    <GeogebraEmbed id={id} width={960} height={540} />    
                </div>
            })
        }

    </DocRenderContainer>

</custom-doc>

<script>
    import * as DOWNLOAD from "@utils/DownloadUtils.js";

    class CustomDoc extends HTMLElement {

        constructor(){
            super();

            const title = document.head.querySelector('title').textContent;
            const getRootAttributes = () => ({
                'data-theme': document.documentElement.getAttribute('data-theme'),
                'data-bs-theme': document.documentElement.getAttribute('data-theme'),
                'lang': document.documentElement.getAttribute('lang')
            });
        
            const $Btn = (selector = '') => this.querySelector(`${selector}`);

            //Show HTML button
            const showHtml = $Btn('#show-html');

            showHtml.addEventListener('click', (e) => {
        
                showHtml.disabled = true;
         
                DOWNLOAD.downloadHTML(this.querySelector('.Render-markdown'), {title, rootAttributes: getRootAttributes()})
                .then(url => {
        
                    open(url, '_blank');
                    showHtml.disabled = false;
                });
            });
        
            //Download HTML button
            const downloadHtml = $Btn('#download-html');
        
            downloadHtml.addEventListener('click', () => {
        
                downloadHtml.disabled = true;
        
                DOWNLOAD.downloadHTML(this.querySelector('.Render-markdown'), {title, rootAttributes: getRootAttributes()})
                .then(url => {
                    
                    DOWNLOAD.downloadFileByURL(url, `${title}.html`);
                    downloadHtml.disabled = false;
                });
            });
        
            //Download PDF button
            const downloadPdf = $Btn('#download-pdf');
        
            downloadPdf.addEventListener('click', () => {
        
                downloadPdf.disabled = true;
        
                DOWNLOAD.downloadPDF(this.querySelector('.Render-markdown'), {title, rootAttributes: getRootAttributes()})
                .then(() => {
        
                    downloadPdf.disabled = false;
                })
            });
        
            //Download Markdown button
            $Btn('#download-md').addEventListener('click', (e) => {
        
                e.preventDefault();

                const url = e.currentTarget.href;
                const name = e.currentTarget.download;
        
                fetch(url)
                .then((response) => response.blob())
                .then(text => {
        
                    const url = URL.createObjectURL(text);
                    DOWNLOAD.downloadFileByURL(url, name);
                })
            });   
        }
    }

    window.customElements.define('custom-doc', CustomDoc);

</script>

<style>

    :global([data-theme="dark"]) {
        --geogebra-title-border-color: #21262d;
    }
    :global([data-theme="light"]) {
        --geogebra-title-border-color: #d8dee4;
    }
    
    .Doc {
        width: 100%;
        margin-bottom: 20px;

        .geogebra-item {
            margin-bottom: 30px;
            padding-inline: 20px;
            padding-block: 10px;

            .geogebra-item-title {
                padding-block: 10px;
                margin-bottom: 20px;

                border-bottom: 1px solid var(--geogebra-title-border-color);
            }
        }
    }

</style>