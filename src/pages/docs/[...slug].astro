---
import { getCollection } from "astro:content";
import DocsLayout from "@layouts/DocsLayout.astro";
import ExcalidrawEmbed from "@layouts/ExcalidrawEmbed/ExcalidrawEmbed.astro";

export async function getStaticPaths() {

    const blogEntries = await getCollection('docs');

    return blogEntries.map((entry) => ({

        params: { slug: entry.slug },

        props: { entry },
    }));
}

const { entry } = Astro.props;

const { Content } = await entry.render();

const stylesVar = Object.entries(entry.data.styles || {}).map(([key, value]) => `--${key}: ${value};`).join(' ');
---

<DocsLayout currentPage={entry.id} title={entry.data.title || entry.slug.split('/').at(-1)}>

    <div class="Doc">

        <div class="Doc-source">

            <button class="btn" title="Mostrar / Ocultar Excalidraw"
            
                onclick="document.getElementById('excalidraw-embed').classList.toggle('show')" 
            >
                <i class="bi bi-pencil-square"></i>
            </button>
    
            <a href={`${import.meta.env.PUBLIC_GITHUB_REPOSITORY}/tree/main/src/content/${entry.collection}/${entry.id}`} 
                target="_blank" rel="noopener noreferrer" title="Ver en github"
            >
                <i class="bi bi-github"></i>
            </a>
    
            <a href={`${import.meta.env.PUBLIC_GITHUB_RAW}/main/src/content/${entry.collection}/${entry.id}`} 
                target="_blank" rel="noopener noreferrer" title="Ver raw markdown"
            >
                <i class="bi bi-filetype-raw"></i>
            </a>
        </div>

        <div class="Doc-content">

            <div class="Render-markdown markdown-body" style={`${stylesVar}`}>
        
                <Content />
        
            </div>

            <div class="excalidraw-embed" id="excalidraw-embed">

                <ExcalidrawEmbed />

            </div>

        </div>
    

    </div>

</DocsLayout>

<script>
    import PhotoSwipeLightbox from 'photoswipe/lightbox';

    const images = document.querySelectorAll('.Render-markdown img')
    
    console.log('images')
    
    images.forEach(img => {

        const anchor = document.createElement('a');

        anchor.setAttribute('data-pswp-src', img.src);
        anchor.setAttribute('data-pswp-width', img.naturalWidth);
        anchor.setAttribute('data-pswp-height', img.naturalHeight);
        anchor.classList.add('image-link-wrapper')

        img.parentElement.appendChild(anchor);
        anchor.appendChild(img);
    });

    if(images.length > 0) {
        
        const lightbox = new PhotoSwipeLightbox({
            gallery: '.Render-markdown',
            children: '.image-link-wrapper',
            pswpModule: () => import('photoswipe'),
        });
    
        lightbox.init();
    }
</script>

<style>
    .Doc {
        width: 100%;
    }

    .Doc-source {
        display: flex;
        justify-content: end;
        padding-inline: 20px;
        padding-bottom: 20px;
        gap: 20px;

        a {
            text-decoration: none;
            color: #000;
            font-size: 24px;

            &:hover {
                color: rgb(5, 72, 159);
            }
        }
        button {
            font-size: 24px;
            padding: 0;
            border: none;

            &:hover {
                color: rgb(5, 72, 159);
            }
        }
    }
    .Doc-content {
        width: 100%;
        max-width: 100%;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;

        & > * {
            width: 100%;
            max-width: 100%;
            min-width: 0px;/*<--- Esto arregla el overflow */
            grid-row-start: 1;
            grid-column-start: 1;
        }

        .Render-markdown {
            .image-link-wrapper {
                cursor: pointer;
            }
        }

        .excalidraw-embed {
            
            visibility: hidden;
        }
        .excalidraw-embed.show {
            visibility: visible;
        }
    }

</style>

