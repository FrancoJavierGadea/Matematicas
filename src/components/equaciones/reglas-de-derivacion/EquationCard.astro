---
const {name = '', tags = [], tabs = []} = Astro.props;

const active = tabs.at(0);
---

<custom-equation-card class="Equation-card" data-tags={tags.join(' ')}>

    <h5 class="Equation-title">{name}</h5>

    <div class="Equation-content">
        {
            tabs.map((tab) => {

                return <div class="Equation-tab" data-tab={tab} class:list={{'active': tab === active}}>
                    <div>
                        <span>Funcion</span>
                        <Fragment set:html={Astro.slots.render(`${tab}-function`)}/>
                        <button class="btn btn-sm copy-btn" title="Copiar latex"><i class="bi bi-clipboard"/></button>
                    </div>
            
                    <div>
                        <span>Derivada</span>
                        <Fragment set:html={Astro.slots.render(`${tab}-derivative`)}/>
                        <button class="btn btn-sm copy-btn" title="Copiar latex"><i class="bi"/></button> 
                    </div>
                </div>
            })
        }  
    </div>

    <div class="Equation-footer">
        {
            tabs.length > 1 && <div class="Equation-controls">
                {
                    tabs.map(tab => {

                        return <button class="btn btn-sm" class:list={{'active': tab === active}} data-tab={tab}>{tab}</button>
                    })
                }
            </div>
        }

        <div class="Equation-tags">
            {
                tags.map(tag => {
    
                    return <span class="badge text-bg-primary">{tag.replace('-', ' ')}</span>
                })
            }
        </div>
    </div>
</custom-equation-card>

<script>
    class CustomEquationCard extends HTMLElement {

        constructor(){
            super();

            this.querySelectorAll('.Equation-controls button')
            .forEach(btn => btn.addEventListener('click', (e) => this.#toggleEquation(e)));

            this.querySelectorAll('.Equation-tab .copy-btn')
            .forEach(btn => btn.addEventListener('click', (e) => this.#copyLatex(e)));
        }

        #toggleEquation(e){
            const tab = e.currentTarget.getAttribute('data-tab');
            
            const currentBtn = this.querySelector(`.Equation-controls button.active`);
            const nextBtn = this.querySelector(`.Equation-controls button[data-tab="${tab}"]`);
            const currentAtive = this.querySelector('.Equation-tab.active');
            const nextActive = this.querySelector(`.Equation-tab[data-tab="${tab}"]`);

            currentAtive.classList.toggle('active', false);
            currentBtn.classList.toggle('active', false);
            nextActive.classList.toggle('active', true);
            nextBtn.classList.toggle('active', true);
        } 
        
        #copyLatex(e){

            const btn = e.currentTarget;
            const latex = btn.parentElement
                .querySelector('[data-latex]').getAttribute('data-latex');

            window.navigator.clipboard.writeText(latex).then(() => {

                btn.classList.toggle('copied', true);
                setTimeout(() => {

                    btn.classList.toggle('copied', false);
                }, 1500);
            });
        }
    }

    customElements.define('custom-equation-card', CustomEquationCard);
</script>

<style>
.Equation-card {

    width: fit-content;
    flex-grow: 1;
    background-color: #555;
    padding: 10px;
    border-radius: 10px;

    display: flex;
    flex-direction: column;
    gap: 20px;

    .Equation-title {
        text-align: center;
        font-weight: bold;
        letter-spacing: 2px;
        
        &::first-letter{

            text-transform: capitalize;
        }
    }

    .Equation-content {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;

        .Equation-tab {
            grid-column-start: 1;
            grid-row-start: 1;

            display: none;
            gap: 20px;
            text-align: center;
            
            & > div {
                position: relative;
                flex-grow: 1;
                display: flex;
                flex-direction: column;
                background-color: #202020;
                border-radius: 5px;
                padding: 10px;
    
                span {
                    font-weight: bold;
                    letter-spacing: 2px;
                    color: #a1a1a1;
                }
                .copy-btn {
                    position: absolute;
                    top: 5px;
                    right: 5px;
                    --bs-btn-active-border-color: transparent;

                    i.bi::before {
                        content: '\f290';
                    }
                    &.copied i.bi::before {
                        content: '\f272';
                    }
                }
            }
        }
        .Equation-tab.active {
            display: flex;
        }
    }
    
    .Equation-footer {
        margin-top: auto;
        display: flex;
        gap: 10px;
        align-items: center;

        .Equation-controls {
            display: flex;
            gap: 10px;

            button {
                font-weight: bold;
                letter-spacing: 1px;

                &::first-letter {
                    text-transform: capitalize;
                }       
            }
        }

        .Equation-tags {
            margin-left: auto;
            display: flex;
            gap: 10px;

            span {
    
                &::first-letter {
                    text-transform: capitalize;
                }
            }
        }
    }
}
</style>