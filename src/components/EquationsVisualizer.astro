---
import Equation from "./Equation.astro";

const {
    equations = [],
    svg = false, 
    scale = 1, varScale = 0.6,
    height = 60, 
    colors = {}, 
    name, title,
    gap = '10px',
    showVariants = false
} = Astro.props;

const [main, ...variants] = equations;
---

<custom-equations-visualizer svg={svg} showVariants={showVariants}>
<div class="Equations-Visualizer">

    { title && <h3 class="Ecuation-title">{title}</h3> }

    <div class="Main-equation">
        {svg && <Equation svg={equations.at(0)} scale={scale} colors={colors} name={name} />}

        {!svg && <Equation src={equations.at(0)} height={height} colors={colors} name={name} />}
    </div>

    <button class="show-variants-btn btn" title={showVariants ? 'Ocultar variantes' : 'Mostrar variantes'}>
        <i class={`bi ${showVariants ? 'bi-chevron-up' : 'bi-chevron-down'}`} />
    </button>

    {equations.length > 1 && <details open={showVariants}>

        <summary style="display: none;"></summary>

        <div class="Variants-Equation">
        {
            variants.map((equation, i) => {
                
                return (<div class="variant" role="button" data-index={++i} style={{order: ++i}}>

                    {svg && <Equation svg={equation} scale={scale * varScale} colors={colors} name={name} />}

                    {!svg && <Equation src={equation} height={height * varScale} colors={colors} name={name} />}

                </div>)
            })
        }
        </div>
    
    </details>
    }

</div>
</custom-equations-visualizer>

<script>
    //@ts-nocheck
    class EquationVisualizer extends HTMLElement {

        current = 0;
        

        constructor(){
            super();

            this.svg = this.hasAttribute('svg');
            this.showVariants = this.hasAttribute('showVariants');

            this.$MainEquation = (sel = '') => this.querySelector(`.Main-equation ${sel}`);
            this.$Variant = (index = 0) => this.querySelector(`.Variants-Equation .variant[data-index="${index}"]`);
            this.$ShowVariantsBtn = (sel = '') => this.querySelector(`.show-variants-btn ${sel}`);

            this.querySelectorAll('.variant[role="button"]').forEach(btn => {

                btn.addEventListener('click', (e) => {

                    const target = e.currentTarget;
                    
                    //Change main content
                    const equation = (() => {

                        if(this.svg) return {
                            target: target.querySelector('.Equation svg'),
                            main: this.$MainEquation('.Equation svg')
                        };
    
                        if(!this.svg) return {
                            target: target.querySelector('.Equation img'),
                            main: this.$MainEquation('.Equation img')
                        };

                    })();

                    equation.target.replaceWith(equation.main);

                    this.$MainEquation('.Equation').appendChild(equation.target); 
                    
                    //Update current index
                    const index = target.getAttribute('data-index');
                    this.current = Number(index);
                });
            });

            this.$ShowVariantsBtn().addEventListener('click', () => {

                this.showVariants = !this.showVariants;

                this.querySelector('details').toggleAttribute('open');

                if(this.showVariants){

                    this.$ShowVariantsBtn('i').classList.replace('bi-chevron-down', 'bi-chevron-up');
                }
                else {
                    this.$ShowVariantsBtn('i').classList.replace('bi-chevron-up', 'bi-chevron-down');
                }

                this.$ShowVariantsBtn().title = this.showVariants ?  'Ocultar variantes' : 'Mostrar variantes';
            });
        }
    }

    customElements.define('custom-equations-visualizer', EquationVisualizer);
</script>

<style
    define:vars={{
        'gap': gap, 
    }}
>
    .Equations-Visualizer {
        position: relative;
        padding: 10px 0;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
        border-radius: 10px;
        box-shadow: 0px 0px 7px 0px #00000021;

        .Ecuation-title {
            padding: 10px;
            font-size: 18px;
            letter-spacing: 2px;
            font-family: "Noto Sans Math", sans-serif;
        }

        .Main-equation {
            display: flex;
            width: 100%;
            justify-content: center;
            padding: 10px;
        }

        details {
            width: 100%;
        }
        .Variants-Equation {
            padding: 10px;
            padding-top: var(--gap);

            width: 100%;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));
            place-items: center;
            gap: 20px 10px;
        }

        .Variants-Equation .variant {
            width: 100%;
        }
        
        .show-variants-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            --bs-btn-border-width: 0;
        }
    }
</style>